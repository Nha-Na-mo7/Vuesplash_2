<?php

namespace Tests\Feature;

use App\Photo;
use App\User;
use GuzzleHttp\Psr7\UploadedFile;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class PhotoSubmitApiTest extends TestCase
{
  use RefreshDatabase;
  
  public function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    
    $this->user = factory(User::class)->create();
  }
  
  /**
   * @test
   */
  public function should_ファイルをアップロードする()
  {
    // テスト用のストレージを使用
    // storage/framework/testing
    Storage::fake('s3');
    
    $response = $this->actingAs($this->user)
        ->json('POST', route('photo.create'),[
            //ダミーファイルを作成して送信している
          'photo' => UploadedFile::fake()->image('photo.jpg'),
        ]);
    
    // レスポンスが201(CREATED)であること
    $response->assertStatus(201);
    
    $photo = Photo::first();
    
    //写真のIDが12桁のランダムな文字列であること
    $this->assertRegExp('/^[0-9a-zA-Z-_]{12}$/', $photo->id);
    
    //DBに挿入されたファイル名のファイルがストレージに保存されていること
    Storage::cloud()->assertExists($photo->filename);
    
  }
  
  /**
   * @test
   */
//  DBとの通信でエラー発生時、ファイルが保存されないことのテスト
  public function should_データベースエラーの場合はファイルを保存しない()
  {
    //乱暴だがこれでDBエラーを発生させる
    Schema::drop('photos');
    
    Storage::fake('s3');
    
    $response = $this->actingAs($this->user)
        ->json('POST', route('photo.create'), [
            'photo' => UploadedFile::fake()->image('photo.jpg'),
        ]);
    
    //レスポンスが500(INTERNAL SERVER ERROR)であること
    $response->assertStatus(500);
    
    //ストレージにファイルが保存されないこと
    $this->assertEquals(0, count(Storage::cloud()->files()));
    
  }
  
  /**
   * @test
   */
  // ファイル保存の段階でエラーが発生したとき、データが登録されないこと
  public function should_ファイル保存エラーの場合DBへの挿入はしない()
  {
    //ストレージをモックして、保存時にエラーを起こさせる
    Storage::shouldReceive('cloud')
        ->once()
        ->andReturnNull();
    
    $response = $this->actingAs($this->user)
        ->json('POST', route('photo.create'), [
            'photo' => UploadedFile::fake()->image('photo.jpg'),
        ]);
    
    //レスポンスが500(INTERNAL SERVER ERROR)であること
    $response->assertStatus(500);
    
    //データベースに何も挿入されないこと
    $this->assertEmpty(Photo::all());
  }
  
  
  
}
